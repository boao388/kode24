---
alwaysApply: true
---
# 목적 : KODE24 프로젝트로, html과 css로만 퍼블리싱된 파일을 Next.js로 전환하는 프로젝트의 Cursor AI 규칙

## 프로젝트 개요
- **프로젝트명**: 새문안 법률사무소 랜딩페이지
- **기술스택**: Next.js 15, TypeScript, SCSS, TanStack Query, Storybook, Jest
- **목적**: HTML 퍼블리싱 파일을 Next.js로 전환하고, 추후 CRM 템플릿으로 활용
- **특징**: 공통컴포넌트화, 재사용성, SEO 최적화, 테스트 자동화
- **퍼블리싱파일 경로 정보 ** : /public/**.html
- ** 퍼블리싱 파일 assets 정보(css, images, js) : /public/assets/css, /public/assets/js, /public/assets/images

- **프로젝트 진행 폴더 경로 ** : /nextjs 

## 폴더 구조 및 명명 규칙

### 디렉토리 구조
```

├── src/
|   ├── app/                    # Next.js App Router 페이지
|   ├── components/             # React 컴포넌트
|   │   ├── common/            # 공통 컴포넌트 (Header, Footer, Layout 등)
|   │   ├── pages/             # 페이지별 특화 컴포넌트
|   │   └── ui/                # 재사용 가능한 UI 컴포넌트
|   ├── hooks/                 # 커스텀 훅
|   ├── lib/                   # 라이브러리 설정 및 유틸리티
|   ├── services/              # API 서비스 레이어
|   ├── types/                 # TypeScript 타입 정의
|   ├── data/                  # 정적 데이터 및 Mock 데이터
|   └── styles/                # SCSS 스타일 파일
|   └── public/                # 정적 파일
|   └── .next/                 # Next.js 빌드 결과
|   └── .env                    # 환경 변수
|   └── .env.local              # 로컬 환경 변수
|   └── .env.production         # 프로덕션 환경 변수
|   └── .env.development        # 개발 환경 변수
|   └── .cursorrules            # Cursor AI 규칙
|   └── .gitignore              # Git 무시 파일
|   └── .prettierrc.json        # Prettier 설정
|   └── .eslintrc.json          # ESLint 설정
|   └── .stylelintrc.json       # Stylelint 설정
|   └── .commitlint.config.js   # Commitlint 설정
```

### 명명 규칙
- **컴포넌트**: PascalCase (예: `Header.tsx`, `BlogCard.tsx`)
- **페이지**: kebab-case (예: `blog-list`, `contact-form`)
- **훅**: camelCase with 'use' prefix (예: `useScrollDetection`)
- **유틸리티**: camelCase (예: `formatDate`, `validateEmail`)
- **상수**: UPPER_SNAKE_CASE (예: `API_BASE_URL`)

## CSS 및 스타일링 규칙

### SCSS 사용 원칙
1. **기존 CSS 클래스만 사용**: `assets/css/`의 기존 클래스만 활용
2. **새로운 스타일 금지**: 별도의 CSS 속성이나 style 속성 사용 금지하고 nextjs의 페이지를 생성할 때는 퍼블리싱 파일의 클래스 속성을 그대로 참고해서 사용할 것.
3. **SCSS 파일 구조**: 
   - `common.scss`: 공통 스타일, 변수, 믹스인
   - `main.scss`: 메인 페이지 스타일
   - `sub.scss`: 서브 페이지 스타일
   - `default.scss`: 기본 스타일
4. ** css, scss ** 내에서는 중복된 클래스나 import 중복된 정보들이 있음. 따라서 nextjs의 성능을 최적화 하기위해 알맞게 css 파일 구조를 재설정할 필요가 있으며, 재설정 된 css 경로정보를 모든 페이지/컴포넌트에 적용해야함. 
5. css 내부의 속성값들은 절대 변경시키면 안되고 그대로 사용해야함. 

### 스타일 적용 방법
- 기존 HTML의 클래스명을 React 컴포넌트에 그대로 적용
- className으로만 스타일 적용, style prop 사용 금지
- 조건부 클래스는 `clsx` 또는 템플릿 리터럴 사용

## 컴포넌트 개발 규칙

### 컴포넌트 구조
```tsx
'use client' // 클라이언트 컴포넌트인 경우

import React from 'react'
import { ComponentProps } from '@/types'

interface Props {
  // props 타입 정의
}

export default function ComponentName({ prop1, prop2 }: Props) {
  // 컴포넌트 로직

  return (
    <div className="existing-css-class">
      {/* JSX 구조 */}
    </div>
  )
}
```

### 공통 컴포넌트 원칙
1. **재사용성**: 여러 페이지에서 사용 가능하도록 설계
2. **Props 인터페이스**: 명확한 타입 정의
3. **접근성**: aria-label, role 등 웹 접근성 고려
4. **반응형**: 모바일/데스크톱 대응

## 데이터 관리 규칙

### TanStack Query 사용
1. **쿼리 키 규칙**: 
   ```ts
   // 예시: ['blog', 'list', { page: 1 }]
   // 형식: [리소스, 액션, 파라미터]
   ```

2. **커스텀 훅 패턴**:
   ```ts
   export function useBlogPosts(page: number = 1) {
     return useQuery({
       queryKey: ['blog', 'list', { page }],
       queryFn: () => blogApi.getPosts(page),
       staleTime: 5 * 60 * 1000, // 5분
     })
   }
   ```

3. **에러 처리**: try-catch 블록과 Error Boundary 활용

### API 서비스 레이어
- `src/services/api.ts`에 모든 API 호출 함수 정의
- RESTful API 패턴 준수
- 공통 에러 처리 및 로딩 상태 관리

## 테스트 규칙

### Jest + Testing Library
1. **테스트 파일 위치**: 컴포넌트와 동일 폴더에 `*.test.tsx`
2. **테스트 커버리지**: 최소 80% 유지
3. **테스트 우선순위**:
   - 사용자 상호작용 테스트
   - 접근성 테스트
   - 비즈니스 로직 테스트

### Storybook
1. **스토리 파일**: 컴포넌트와 동일 폴더에 `*.stories.tsx`
2. **필수 스토리**: Default, With Props, Error State
3. **접근성 애드온**: 모든 컴포넌트에 a11y 테스트 포함

## SEO 최적화 규칙

### 메타데이터 관리
```ts
export const metadata: Metadata = {
  title: '페이지 제목 - 새문안 법률사무소',
  description: '페이지 설명 (160자 이내)',
  keywords: '관련 키워드',
  openGraph: {
    title: '소셜 미디어 제목',
    description: '소셜 미디어 설명',
    images: ['/images/og-image.jpg'],
  },
}
```

### 구조화된 데이터
- JSON-LD 형식으로 구조화된 데이터 삽입
- 법률사무소, 변호사, 서비스 정보 포함

## 성능 최적화 규칙

### 이미지 최적화
- Next.js Image 컴포넌트 사용 필수
- WebP, AVIF 형식 우선 사용
- lazy loading 적용

### 코드 분할
- 페이지별 동적 import 활용
- 큰 라이브러리는 필요시에만 로드

### 캐싱 전략
- TanStack Query를 통한 데이터 캐싱
- 정적 에셋 캐싱 설정

## 타입 안전성 규칙

### TypeScript 사용 원칙
1. **any 타입 금지**: 명확한 타입 정의 필수
2. **인터페이스 우선**: type보다 interface 사용 권장
3. **제네릭 활용**: 재사용 가능한 타입 정의
4. **엄격 모드**: strict: true 설정 유지

### 타입 정의 위치
- 전역 타입: `src/types/index.ts`
- 컴포넌트별 타입: 해당 컴포넌트 파일 내부
- API 관련 타입: `src/types/api.ts`

## 코드 품질 관리

### ESLint 규칙
- Next.js 권장 설정 사용
- 접근성 규칙 포함
- 커스텀 규칙 최소화

### 코드 포맷팅
- Prettier 사용
- 일관된 들여쓰기 및 줄바꿈
- import 순서 정리

## 개발 워크플로우

### 브랜치 전략
- main: 프로덕션 브랜치
- develop: 개발 브랜치
- feature/*: 기능 개발 브랜치

### 커밋 메시지 규칙
```
feat: 새로운 기능 추가
fix: 버그 수정
docs: 문서 수정
style: 코드 스타일 변경
refactor: 코드 리팩토링
test: 테스트 코드 추가/수정
chore: 빌드 프로세스 또는 보조 도구 변경
```

## 배포 및 환경 관리

### 환경 변수
- `.env.local`: 로컬 개발 환경
- `.env.production`: 프로덕션 환경
- 민감한 정보는 환경 변수로 관리

### 빌드 최적화
- 번들 크기 분석
- 불필요한 의존성 제거
- Tree shaking 활용

## Cursor AI 활용 가이드

### 효율적인 질문 방법
1. **구체적인 요청**: "Header 컴포넌트에 모바일 메뉴 토글 기능 추가"
2. **컨텍스트 제공**: 기존 CSS 클래스명과 구조 언급
3. **제약 조건 명시**: 기존 CSS만 사용, TypeScript 필수 등

### 코드 리뷰 요청
- 성능 최적화 관점
- 접근성 준수 여부
- 타입 안전성 검토
- 테스트 커버리지 확인

### 디버깅 지원
- 에러 메시지와 함께 관련 코드 제공
- 예상 동작과 실제 동작 비교
- 브라우저 개발자 도구 결과 공유

이 규칙들을 준수하여 일관성 있고 유지보수 가능한 코드를 작성하세요. 